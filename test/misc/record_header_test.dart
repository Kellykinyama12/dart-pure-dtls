import 'dart:typed_data';

import 'package:dart_dtls_final/record_header.dart';
import 'package:dart_dtls_final/utils.dart';

//dart .\test\misc\record_header_test.dart

void main() {
  // Uint8List ChangeCipherSpecSinglePacket = Uint8List.fromList([
  //   0x14,
  //   0xfe,
  //   0xff,
  //   0x00,
  //   0x00,
  //   0x00,
  //   0x00,
  //   0x00,
  //   0x00,
  //   0x00,
  //   0x12,
  //   0x00,
  //   0x01,
  //   0x01,
  // ]);

  // var (recordHeader, offset, arrayLen) = RecordHeader.decode(
  //     ChangeCipherSpecSinglePacket, 0, ChangeCipherSpecSinglePacket.length);
  var (recordHeader, offset, arrayLen) =
      RecordHeader.decode(serverHelloTest, 0, serverHelloTest.length);

  // RecordHeader {
  //       record_layer_header: RecordLayerHeader {
  //           content_type: ContentType::ChangeCipherSpec,
  //           protocol_version: ProtocolVersion {
  //               major: 0xfe,
  //               minor: 0xff,
  //           },
  //           epoch: 0,
  //           sequence_number: 18,
  //           content_len: 1,
  //       },
  //       content: Content::ChangeCipherSpec(ChangeCipherSpec {}),
  //   },

  final version = DtlsVersion.values.firstWhere((v) =>
      v.value ==
      ByteData.sublistView(Uint8ClampedList.fromList([0xfe, 0xff]), 0, 2)
          .getUint16(0, Endian.big));

  final seqNum = intToUint8List(18);

  final testRecordHeader = RecordHeader(
    contentType: ContentType.ChangeCipherSpec,
    version: version,
    epoch: 0,
    sequenceNumber: seqNum,
    intSequenceNumber: 18,
    length: 1,
  );
  print("Decoded recorder header: $recordHeader");

  print("Wanted recorder header: $testRecordHeader");
}

final serverHelloTest = Uint8List.fromList([
  0x16,
  0xfe,
  0xfd,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x9d,
  0x01,
  0x00,
  0x00,
  0x91,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x91,
  0xfe,
  0xfd,
  0xe0,
  0xe1,
  0xe2,
  0xe3,
  0xe4,
  0xe5,
  0xe6,
  0xe7,
  0xe8,
  0xe9,
  0xea,
  0xeb,
  0xec,
  0xed,
  0xee,
  0xef,
  0xf0,
  0xf1,
  0xf2,
  0xf3,
  0xf4,
  0xf5,
  0xf6,
  0xf7,
  0xf8,
  0xf9,
  0xfa,
  0xfb,
  0xfc,
  0xfd,
  0xfe,
  0xff,
  0x00,
  0x00,
  0x00,
  0x06,
  0x13,
  0x01,
  0x13,
  0x02,
  0x13,
  0x03,
  0x01,
  0x00,
  0x00,
  0x61,
  0x00,
  0x33,
  0x00,
  0x26,
  0x00,
  0x24,
  0x00,
  0x1d,
  0x00,
  0x20,
  0x35,
  0x80,
  0x72,
  0xd6,
  0x36,
  0x58,
  0x80,
  0xd1,
  0xae,
  0xea,
  0x32,
  0x9a,
  0xdf,
  0x91,
  0x21,
  0x38,
  0x38,
  0x51,
  0xed,
  0x21,
  0xa2,
  0x8e,
  0x3b,
  0x75,
  0xe9,
  0x65,
  0xd0,
  0xd2,
  0xcd,
  0x16,
  0x62,
  0x54,
  0x00,
  0x2b,
  0x00,
  0x03,
  0x02,
  0xfe,
  0xfc,
  0x00,
  0x0d,
  0x00,
  0x20,
  0x00,
  0x1e,
  0x06,
  0x03,
  0x05,
  0x03,
  0x04,
  0x03,
  0x02,
  0x03,
  0x08,
  0x06,
  0x08,
  0x0b,
  0x08,
  0x05,
  0x08,
  0x0a,
  0x08,
  0x04,
  0x08,
  0x09,
  0x06,
  0x01,
  0x05,
  0x01,
  0x04,
  0x01,
  0x03,
  0x01,
  0x02,
  0x01,
  0x00,
  0x16,
  0x00,
  0x00,
  0x00,
  0x0a,
  0x00,
  0x04,
  0x00,
  0x02,
  0x00,
  0x1d
]);
